import type { NextApiRequest, NextApiResponse } from 'next';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import GetData from '@/services/getData.service';
import DrawAlert from '@/services/alertDraw.service';
// import { encrypt } from '@/app/lib/session';
import { withSession } from 'app/lib/session';



const users = [
    { id: 1, username: 'Ajon Doe', password: 'admin' } // hashed password
];

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    const { username, password } = req.body;
    const users2Get = await GetData("login/" + username)
    const users2 = users2Get.User
    // const user = users.find(user => user.username === username);
    const user2 = users2.find(user => user.name_user === username);
    if (!user2) {
        DrawAlert(1,"Failed","Invalid username")
        return res.status(401).json({ message: 'Invalid username' });
    }

    //   const isPasswordValid = await bcrypt.compare(password, user.password);
    // const isPasswordValid = users.find(user => user.password === password);
    const isPasswordValid2 = users2.find(user => user.password_user === password);
    
    if (!isPasswordValid2) {
        DrawAlert(1,"Failed","Invalid password")
        return res.status(401).json({ message: 'Invalid password' });
    }

    // const token = jwt.sign({ id: user.id, username: user.username }, 'your_jwt_secret', { expiresIn: '1h' });
    const token = jwt.sign({ id: user2.id, username: user2.username }, 'your_jwt_secret', { expiresIn: '1h' });
    // session
    // const sessionData = req.body
    // const encryptedSessionData = encrypt(sessionData)
    // session

    DrawAlert(3,"Success","Login Success")
    res.status(200).json({ token });
}
